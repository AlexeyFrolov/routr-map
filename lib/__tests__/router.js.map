{"version":3,"sources":["../../src/__tests__/router.js"],"names":[],"mappings":";;;;sBAAmB,WAAW;;;;AAE9B,QAAQ,CAAC,cAAc,EAAE,YAAM;AAC3B,QAAM,MAAM,GAAG,wBAAW,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;AACpD,MAAE,CAAC,wBAAwB,EAAE,YAAM;AAC/B,cAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;AAChF,cAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC9D,cAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC1D,cAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC3D,cAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC/D,cAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;KACpF,CAAC,CAAC;;AAEH,MAAE,CAAC,oCAAoC,EAAE,YAAM;AAC3C,cAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC,CAAC,CAClE,IAAI,CAAC,qCAAqC,CAAC,CAAC;AACjD,cAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC,CAAC,CACzD,IAAI,CAAC,4BAA4B,CAAC,CAAC;AACxC,cAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC,CAAC,CACvD,IAAI,CAAC,0BAA0B,CAAC,CAAC;KACzC,CAAC,CAAC;;;;;;;;;;CAUN,CAAC,CAAC","file":"router.js","sourcesContent":["import Router from \"../router\";\n\ndescribe('Router match', () => {\n    const router = new Router(require('./data/routes'));\n    it('should match and build', () => {\n        expect(router.url(router.match('/users/1/comments'))).toBe('/users/1/comments');\n        expect(router.url(router.match('/users/1'))).toBe('/users/1');\n        expect(router.url(router.match('/users'))).toBe('/users');\n        expect(router.url(router.match('/users/'))).toBe('/users');\n        expect(router.url(router.match('/users/1/'))).toBe('/users/1');\n        expect(router.url(router.match('/users/1/comments/'))).toBe('/users/1/comments');\n    });\n\n    it('should match and build with domain', () => {\n        expect(router.url(router.match('http://example.com/users/1/comments')))\n            .toBe('http://example.com/users/1/comments');\n        expect(router.url(router.match('http://example.com/users/1')))\n            .toBe('http://example.com/users/1');\n        expect(router.url(router.match('http://example.com/users')))\n            .toBe('http://example.com/users');\n    });\n\n    //it('should match and build with domain w/o scheme', () => {\n    //    expect(router.url(router.match('example.com/users/1/comments')))\n    //        .toBe('http://example.com/users/1/comments');\n    //    expect(router.url(router.match('example.com/users/1')))\n    //        .toBe('http://example.com/users/1');\n    //    expect(router.url(router.match('example.com/users')))\n    //        .toBe('http://example.com/users');\n    //});\n});"]}