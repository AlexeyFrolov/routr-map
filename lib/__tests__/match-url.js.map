{"version":3,"sources":["../../src/__tests__/match-url.js"],"names":[],"mappings":";;;;sBAAmB,WAAW;;;;AAE9B,QAAQ,CAAC,cAAc,EAAE,YAAM;AAC3B,QAAM,MAAM,GAAG,wBAAW,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;AACpD,MAAE,CAAC,iCAAiC,EAAE,YAAM;AACxC,cAAM,CAAC,MAAM,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;AACxF,cAAM,CAAC,MAAM,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACvE,CAAC,CAAC;;AAEH,MAAE,CAAC,mDAAmD,EAAE,YAAM;AAC1D,cAAM,CAAC,MAAM,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;AACzF,cAAM,CAAC,MAAM,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACxE,CAAC,CAAC;;AAEH,MAAE,CAAC,2BAA2B,EAAE,YAAM;AAClC,cAAM,CAAC,MAAM,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAC,EAAE,EAAE,GAAG,EAAC,CAAC,CAAC;AACtF,cAAM,CAAC,MAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAC,EAAE,EAAE,GAAG,EAAC,CAAC,CAAC;KAChF,CAAC,CAAC;;AAEH,MAAE,CAAC,2BAA2B,EAAE,YAAM;AAClC,cAAM,CAAC,MAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAC,EAAE,EAAE,GAAG,EAAC,CAAC,CAAC;KACnF,CAAC,CAAC;;AAEH,MAAE,CAAC,8CAA8C,EAAE,YAAM;AACrD,cAAM,CAAC,MAAM,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAC,EAAE,EAAE,GAAG,EAAC,CAAC,CAAC;KACrF,CAAC,CAAC;;AAEH,MAAE,CAAC,sFAAsF,EAAE,YAAM;AAC7F,cAAM,CAAC,MAAM,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAC,EAAE,EAAE,GAAG,EAAC,CAAC,CAAC;KACpF,CAAC,CAAC;;AAEH,MAAE,CAAC,qBAAqB,EAAE,YAAM;AAC5B,cAAM,CAAC,MAAM,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;KACtF,CAAC,CAAC;;AAEH,MAAE,CAAC,qBAAqB,EAAE,YAAM;AAC5B,cAAM,CAAC,MAAM,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC/E,CAAC,CAAC;CACN,CAAC,CAAC","file":"match-url.js","sourcesContent":["import Router from \"../router\";\n\ndescribe('Router match', () => {\n    const router = new Router(require('./data/routes'));\n    it('should match correct route name', () => {\n        expect(router.match('http://example.com/users/1/comments').name).toBe('users.comments');\n        expect(router.match('http://example.com/users').name).toBe('users');\n    });\n\n    it('should match correct route name even with slashes', () => {\n        expect(router.match('http://example.com/users/1/comments/').name).toBe('users.comments');\n        expect(router.match('http://example.com/users/').name).toBe('users');\n    });\n\n    it('should match route params', () => {\n        expect(router.match('http://example.com/users/1/comments').params).toEqual({id: '1'});\n        expect(router.match('http://example.com/users/1').params).toEqual({id: '1'});\n    });\n\n    it('should match query params', () => {\n        expect(router.match('http://example.com/users?id=1').params).toEqual({id: '1'});\n    });\n\n    it('should prefer route params over query params', () => {\n        expect(router.match('http://example.com/users/1?id=2').params).toEqual({id: '1'});\n    });\n\n    it('should return original query param even if there is a route param with the same name', () => {\n        expect(router.match('http://example.com/users/1?id=2').query).toEqual({id: '2'});\n    });\n\n    it('should match domain', () => {\n        expect(router.match('http://example.com/users/1?id=2').domain).toBe(\"example.com\");\n    });\n\n    it('should match scheme', () => {\n        expect(router.match('http://example.com/users/1?id=2').scheme).toBe(\"http\");\n    });\n});"]}