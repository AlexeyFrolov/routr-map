{"version":3,"sources":["../src/router.js"],"names":[],"mappings":"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","file":"router.js","sourcesContent":["import qs from \"querystring\";\n\nconst assign = Object.assign || function (target) {\n    if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert first argument to object');\n    }\n\n    var to = Object(target);\n    for (var i = 1; i < arguments.length; i++) {\n        var nextSource = arguments[i];\n        if (nextSource === undefined || nextSource === null) {\n            continue;\n        }\n        nextSource = Object(nextSource);\n\n        var keysArray = Object.keys(Object(nextSource));\n        for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n            var nextKey = keysArray[nextIndex];\n            var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n            if (desc !== undefined && desc.enumerable) {\n                to[nextKey] = nextSource[nextKey];\n            }\n        }\n    }\n    return to;\n};\n\nclass Router {\n\n    routes;\n\n    constructor (routes) {\n        this.routes = routes;\n    }\n\n    match (url) {\n        let {path, query, domain, scheme} = Router.parseUrl(url);\n        let params = path.reduce((result, step) => {\n            if (result === false) {\n                return false;\n            }\n            let { node } = result;\n            let routeStep = Router.getRouteStep(node, step);\n            if (!routeStep) {\n                return false;\n            }\n            result.node = node[routeStep];\n            result.routePath.push(routeStep);\n            if (Router.isParam(routeStep)) {\n                result.params[Router.paramName(routeStep)] = step;\n            }\n            return result;\n        }, {\n            node: this.routes,\n            params: {},\n            routePath: []\n        });\n        if (params === false) {\n            return false;\n        }\n        params.params = assign({}, query, params.params);\n        params.query = query;\n        params.name = params.routePath.filter(step => !Router.isParam(step)).join('.');\n        params.domain = domain;\n        params.scheme = scheme;\n        return params;\n    }\n\n    /**\n     * {name, params}\n     */\n    url ({name, params = {}, query = {}, domain = \"\", scheme = \"http\"}) {\n        scheme = domain && scheme + \"://\";\n        return scheme + domain + '/' + this.getFullRoute({name, params}).reduce((url, step) => {\n            url.push(Router.isParam(step) && params[Router.paramName(step)] || step);\n            return url;\n        }, []).join('/') + (qs.stringify(query) ? \"?\" + qs.stringify(query) : \"\");\n    }\n\n    getFullRoute({name, params = {}}) {\n        name = typeof name === \"string\" && name.split(\".\") || name;\n        let result = [];\n        let current = name.shift();\n        let node = this.routes;\n        while (current) {\n            if (node[current]) {\n                result.push(current);\n                node = node[current];\n                let nodeParam = Router.getNodeParam(node);\n                let paramName = Router.paramName(nodeParam);\n                current = name.shift() || params[paramName] && nodeParam;\n            } else {\n                let nodeParam = Router.getNodeParam(node);\n                if (!nodeParam) {\n                    throw new Error(\"Route with name '\" + name.join(\".\") + \"' does not exists\");\n                }\n                let paramName = Router.paramName(nodeParam);\n                if (!params[paramName]) {\n                    throw new Error(\"Parameter '\" + paramName + \"' should be provided\");\n                }\n                name.unshift(current);\n                current = nodeParam;\n            }\n        }\n        return result;\n    }\n\n    static getRouteStep(node, step) {\n        return node && node[step] && step || Router.getNodeParam(node)\n    }\n\n    static parseUrl(url) {\n        let scheme = \"\";\n        url = url.split(\"://\");\n        if (url[1]) {\n            scheme = url[0];\n            url = url[1];\n        } else {\n            url = url[0];\n        }\n        let [path, query] = url.split(\"?\");\n        path = path.split(\"/\");\n        let domain = scheme.length && path[0] || \"\";\n        path = domain.length && path.splice(1) || path;\n        path = path.filter(step => step.trim() !== \"\");\n        query = qs.parse(query);\n        return {path, query, scheme, domain};\n    }\n\n    static isParam(step) {\n        return step.substr(0, 1) === ':';\n    }\n\n    static paramName(step) {\n        return step.substr(1)\n    }\n\n    static getNodeParam(node) {\n        return Object.keys(node).filter(key => Router.isParam(key))[0] || \"\";\n    }\n\n}\n\nexport default Router;"]}